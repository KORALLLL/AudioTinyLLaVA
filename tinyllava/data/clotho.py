import random, csv
import json
from tqdm import tqdm
import soundfile as sf

# generated by gpt4o
prompts = [
    "Provide a caption for this audio.",
    "Describe the content of the given audio.",
    "What is happening in this audio?",
    "Give a summary of the sounds in this audio.",
    "Explain the main events in this audio recording.",
    "Generate a caption for the sounds you hear.",
    "Can you provide a description of this audio?",
    "What do you hear in this audio file?",
    "Summarize the audio content in one sentence.",
    "Create a caption that describes this audio clip.",
    "What is the sound in this audio clip?",
    "Describe the scene that corresponds to this audio.",
    "Write a brief caption for the sounds in the audio.",
    "What sounds are present in this audio?",
    "Provide a brief description of the audio.",
    "What is the story behind this audio?",
    "Describe the atmosphere conveyed in this audio.",
    "Generate a text description for the sounds heard.",
    "What does this audio recording depict?",
    "Write a caption that explains the audio content.",
    "What can be inferred from the audio sounds?",
    "What is the context of the sounds in this audio?",
    "Provide a narrative of what is happening in the audio.",
    "Summarize what is heard in this audio clip.",
    "What events or actions are captured in this audio?",
    "Describe any activities or actions in this audio.",
    "What do the sounds in this audio indicate?",
    "Provide a meaningful caption for this sound clip.",
    "Explain what is audible in this audio.",
    "What is the most likely scenario described by this audio?",
    "Create a description based on the audio content.",
    "What could be the possible context of this audio?",
    "Give a detailed caption for the events in the audio.",
    "What does this audio tell you?",
    "What is the overall theme of this audio?",
    "Can you describe the audio with a single caption?",
    "Provide an insightful description of the audio clip.",
    "What can you deduce from the sounds in this audio?",
    "Write a sentence that captures the essence of this audio.",
    "Give a caption that matches the sounds heard.",
    "What is the primary sound in this audio?",
    "How would you describe the content of this audio?",
    "Provide a narrative description of the audio clip.",
    "What events are taking place in this audio?",
    "Summarize the auditory events in the clip.",
    "What is the main action or event in this audio?",
    "Describe the audio file in a sentence.",
    "Give a brief overview of the sounds in the audio.",
    "Create a caption that summarizes this audio.",
    "Describe any identifiable sounds in the audio.",
    "What is the soundscape like in this audio clip?",
    "Provide a textual representation of the sounds heard.",
    "Write a caption that accurately reflects this audio.",
    "What story does this audio convey?",
    "Describe the key elements heard in the audio.",
    "What scenario does this audio clip present?",
    "Explain what is happening in the given audio.",
    "Write a caption for the background sounds in this audio.",
    "What mood or emotion is depicted in this audio?",
    "What is the sound environment of this audio clip?"
]


dev_path = "/home/user27/clotho/dev/development"
test_path = "/home/user27/clotho/eval/evaluation"



def generate_multimodal_ds(sample_id, sample_path, sample_captions, get_lengths=True):
    audio_data = []
    
    
    for idx, caption in enumerate(sample_captions):
        sample_dict = dict()
        sample_dict["id"] = sample_id[:-4] + str(idx)
        sample_dict["audio"] = sample_path + "/" + sample_id
        conversations = [
            {"from": "human", "value": "<audio>\n" + random.choice(prompts)},
            {"from": "gpt", "value": caption}
        ]
        sample_dict['conversations'] = conversations
        if get_lengths:
            wavs, sampling_rate = sf.read(sample_dict["audio"])
            if len(wavs.shape) > 1:
                print("Error nor Mono")
            sample_dict["length"] = len(wavs)
        audio_data.append(sample_dict)
    return audio_data


def generate_dict(path, data, get_lengths=True):
    all_data = []

    for sample in tqdm(data):
        # obtain_transcribation(transcribe_path, all_paths, f"{current_path}/{chapter}")
        new_sample = generate_multimodal_ds(sample_id=sample[0],
                                                sample_path=path,
                                                sample_captions=sample[1:],
                                                get_lengths=get_lengths)
        all_data.extend(new_sample)
    return all_data
        
def csv_read(path):
    data = []

    with open(path, mode='r', newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            data.append(row)

    return data[1:]

data = csv_read("/home/user27/clotho/clotho_captions_development.csv")
dev_data = generate_dict(dev_path, data, True)
print(len(dev_data))
with open(f"dev.json", 'w') as f: json.dump(dev_data, f, indent=4)


data = csv_read("/home/user27/clotho/clotho_captions_evaluation.csv")
test_data = generate_dict(test_path, data, None)
print(len(test_data))
with open(f"test.json", 'w') as f: json.dump(test_data, f, indent=4)
